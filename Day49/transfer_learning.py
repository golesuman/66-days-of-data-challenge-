# -*- coding: utf-8 -*-
"""transfer_learning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1--pBsr_WovjO4hxkgFZVCbFdOCNcLHaY
"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d gpiosenka/butterfly-images40-species

! unzip butterfly-images40-species.zip

import torch, torchvision
from torchvision import datasets, models, transforms
import torch.nn as nn
import torch.optim as optim
from torch.utils.data import DataLoader,Dataset
import time
from torchsummary import summary

import numpy as np
import matplotlib.pyplot as plt
import os

from PIL import Image
import pandas as pd

import cv2
train_data=[]
train_label=[]
train_path='/content/butterflies/train'
categories=os.listdir(train_path)

def createtraining():
  for category in categories:
    path=os.path.join(train_path,category)
    class_label=categories.index(category)
    for img in os.listdir(path):
      img_array=cv2.imread(os.path.join(path,img))
      colored=cv2.cvtColor(img_array,cv2.COLOR_BGR2RGB)
      resized=cv2.resize(colored,(150,150))
      train_data.append(resized)
      train_label.append(class_label)

createtraining()

valid_path='/content/butterflies/valid'
valid_data=[]
valid_label=[]
def createvalidation():
  for category in categories:
    path=os.path.join(valid_path,category)
    class_label=categories.index(category)
    for img in os.listdir(path):
      img_array=cv2.imread(os.path.join(path,img))
      colored=cv2.cvtColor(img_array,cv2.COLOR_BGR2RGB)
      resized=cv2.resize(colored,(150,150))
      valid_data.append(resized)
      valid_label.append(class_label)
createvalidation()

len(valid_data)

len(categories)

plt.figure(figsize=(8,8))
for i in range(6):
  plt.subplot(2,3,i+1)
  plt.imshow(valid_data[i])
plt.show()

plt.figure(figsize=(8,8))
for i in range(6):
  plt.subplot(2,3,i+1)
  plt.imshow(train_data[i])
plt.show()

len(train_data)



class loadData(Dataset):
  def __init__(self,transform):
    self.x=train_data
    self.y=train_label
    self.transform=transform

  def __getitem__(self,idx):
    image=self.x[idx]
    image=self.transform(image)
    label=self.y[idx]
    return image,label

  def __len__(self):
    return len(self.x)

class loadvalidData(Dataset):
  def __init__(self,transform):
    self.x=valid_data
    self.y=valid_label
    self.transform=transform

  def __getitem__(self,idx):
    image=self.x[idx]
    image=self.transform(image)
    label=self.y[idx]
    return image,label

  def __len__(self):
    return len(self.x)

import torchvision.transforms as transforms
image_transforms = { 
    'train': transforms.Compose([
        transforms.ToTensor(),
        transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),
        transforms.RandomRotation(degrees=15),
        transforms.RandomHorizontalFlip(),
        transforms.CenterCrop(size=224),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'valid': transforms.Compose([
        transforms.ToTensor(),
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ]),
    'test': transforms.Compose([
        transforms.ToTensor(),
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])
}

data_transform=transforms.Compose([
       transforms.ToTensor(),
        transforms.RandomResizedCrop(size=256, scale=(0.8, 1.0)),
        transforms.RandomRotation(degrees=15),
        transforms.RandomHorizontalFlip(),
        transforms.CenterCrop(size=224),
        transforms.Normalize([0.485, 0.456, 0.406],
                             [0.229, 0.224, 0.225])
    ])

training_data=loadData(transform=data_transform)
len(training_data)

type(training_data[0][0])

type(train_data[0])

validation_data=loadvalidData(transform=image_transforms['valid'])

training_data[0]

train_loader=DataLoader(training_data,batch_size=32,shuffle=True)
valid_loader=DataLoader(validation_data,batch_size=32,shuffle=False)
device=torch.device('cuda' if torch.cuda.is_available() else 'cpu')

alexnet=torchvision.models.alexnet(pretrained=True)
# freezing the mdoel parameters
for param in alexnet.parameters():
  param.requires_grad=False
alexnet

images,labels=next(iter(train_loader))
images[0]

print(device)

# Define Optimizer and Loss Function
loss_func = nn.NLLLoss()
optimizer = optim.Adam(alexnet.parameters())
optimizer

alexnet.classifier[6] = nn.Linear(4096,50)
alexnet.classifier.add_module("7", nn.LogSoftmax(dim = 1))
alexnet.to(device)

def train_and_validate(model, loss_criterion, optimizer, epochs=15):
    '''
    Function to train and validate
    Parameters
        :param model: Model to train and validate
        :param loss_criterion: Loss Criterion to minimize
        :param optimizer: Optimizer for computing gradients
        :param epochs: Number of epochs (default=25)
  
    Returns
        model: Trained Model with best validation accuracy
        history: (dict object): Having training loss, accuracy and validation loss, accuracy
    '''
    
    start = time.time()
    history = []
    best_acc = 0.0

    for epoch in range(epochs):
        epoch_start = time.time()
        print("Epoch: {}/{}".format(epoch+1, epochs))
        
        # Set to training mode
        model.train()
        
        # Loss and Accuracy within the epoch
        train_loss = 0.0
        train_acc = 0.0
        
        valid_loss = 0.0
        valid_acc = 0.0
        
        for i, (inputs, labels) in enumerate(train_loader):

            inputs = inputs.to(device)
            labels = labels.to(device)
            
            # Clean existing gradients
            optimizer.zero_grad()
            
            # Forward pass - compute outputs on input data using the model
            outputs = model(inputs)
            
            # Compute loss
            loss = loss_criterion(outputs, labels)
            
            # Backpropagate the gradients
            loss.backward()
            
            # Update the parameters
            optimizer.step()
            
            # Compute the total loss for the batch and add it to train_loss
            train_loss += loss.item() * inputs.size(0)
            
            # Compute the accuracy
            ret, predictions = torch.max(outputs.data, 1)
            correct_counts = predictions.eq(labels.data.view_as(predictions))
            
            # Convert correct_counts to float and then compute the mean
            acc = torch.mean(correct_counts.type(torch.FloatTensor))
            
            # Compute total accuracy in the whole batch and add to train_acc
            train_acc += acc.item() * inputs.size(0)
            
            #print("Batch number: {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}".format(i, loss.item(), acc.item()))

            
        # Validation - No gradient tracking needed
        with torch.no_grad():

            # Set to evaluation mode
            model.eval()

            # Validation loop
            for j, (inputs, labels) in enumerate(valid_loader):
                inputs = inputs.to(device)
                labels = labels.to(device)

                # Forward pass - compute outputs on input data using the model
                outputs = model(inputs)

                # Compute loss
                loss = loss_criterion(outputs, labels)

                # Compute the total loss for the batch and add it to valid_loss
                valid_loss += loss.item() * inputs.size(0)

                # Calculate validation accuracy
                ret, predictions = torch.max(outputs.data, 1)
                correct_counts = predictions.eq(labels.data.view_as(predictions))

                # Convert correct_counts to float and then compute the mean
                acc = torch.mean(correct_counts.type(torch.FloatTensor))

                # Compute total accuracy in the whole batch and add to valid_acc
                valid_acc += acc.item() * inputs.size(0)

                #print("Validation Batch number: {:03d}, Validation: Loss: {:.4f}, Accuracy: {:.4f}".format(j, loss.item(), acc.item()))
            
        # Find average training loss and training accuracy
        avg_train_loss = train_loss/len(train_loader.dataset)
        avg_train_acc = train_acc/len(train_loader.dataset)

        # Find average training loss and training accuracy
        avg_valid_loss = valid_loss/len(valid_loader.dataset) 
        avg_valid_acc = valid_acc/len(valid_loader.dataset)

        history.append([avg_train_loss, avg_valid_loss, avg_train_acc, avg_valid_acc])
                
        epoch_end = time.time()
    
        print("Epoch : {:03d}, Training: Loss: {:.4f}, Accuracy: {:.4f}%, \n\t\tValidation : Loss : {:.4f}, Accuracy: {:.4f}%, Time: {:.4f}s".format(epoch+1, avg_train_loss, avg_train_acc*100, avg_valid_loss, avg_valid_acc*100, epoch_end-epoch_start))
        
        # Save if the model has best accuracy till now
        #torch.save(model, dataset+'_model_'+str(epoch)+'.pt')
            
    return model, history

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")

num_epochs = 50
trained_model, history = train_and_validate(alexnet, loss_func, optimizer, num_epochs)

torch.save(history, dataset+'_history.pt')

