# -*- coding: utf-8 -*-
"""flowerclassification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1f8VODra9hABmQfWabnThMiav3UDa1Q34
"""

! mkdir ~/.kaggle
! cp kaggle.json ~/.kaggle/
! chmod 600 ~/.kaggle/kaggle.json

! kaggle datasets download -d msheriey/104-flowers-garden-of-eden

! unzip 104-flowers-garden-of-eden

import os
import matplotlib.pyplot as plt
import tensorflow as tf
import cv2 
import numpy 
from tensorflow.keras import layers,models
train_path='/content/jpeg-512x512/train'
valid_path='/content/jpeg-512x512/val'
categories=[category for category in os.listdir(train_path)]
len(categories)

categories1=[category for category in os.listdir(valid_path)]
len(categories1)

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_data_gen=ImageDataGenerator(zoom_range=1,vertical_flip=True,width_shift_range=0.2,height_shift_range=0.2,
                                  fill_mode='nearest',shear_range=0.2,rescale=1./255)
valid_data_gen=ImageDataGenerator(zoom_range=1,vertical_flip=True,width_shift_range=0.3,height_shift_range=0.1,
                                  fill_mode='nearest',shear_range=0.4,rescale=1./255)
train_data=train_data_gen.flow_from_directory(directory=train_path,target_size=(100,100),batch_size=50)
valid_data=valid_data_gen.flow_from_directory(directory=valid_path,target_size=(100,100),batch_size=50)

model=models.Sequential([
                         layers.Conv2D(63,(3,3),activation='relu',input_shape=(100,100,3)),
                         layers.MaxPool2D(3,3),

                         layers.Conv2D(63,(3,3),activation='relu'),
                         layers.MaxPool2D(3,3),

                         layers.Conv2D(65,(3,3),activation='relu'),
                         layers.MaxPool2D(3,3),
                         layers.Flatten(),
                         layers.Dense(500,activation='relu'),
                         layers.Dense(104,activation='softmax')
])

model.compile(optimizer='Adam',loss='categorical_crossentropy',metrics=['accuracy'])

model.summary()

hist=model.fit(train_data,validation_data=valid_data,epochs=5)

plt.figure(figsize=(12,8))
plt.plot(hist.history['accuracy'],label='accuracy')
plt.plot(hist.history['val_accuracy'],label='validation Accuracy')
plt.ylim(0,4)
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()
plt.figure(figsize=(12,8))
plt.plot(hist.history['loss'],label='loss')
plt.plot(hist.history['val_loss'],label='validation loss')
plt.ylim(0,4)
plt.xlabel('Epochs')
plt.ylabel('loss')
plt.legend()
plt.show()

